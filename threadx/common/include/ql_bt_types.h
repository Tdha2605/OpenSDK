#ifndef QL_BT_TYPES_H
#define QL_BT_TYPES_H





#define BT_UART_DMA_RX_DEBUG
#define FIRMWARE_POSITION_SD                0
#define FIRMWARE_POSITION_FLASH_PARTITION   1
#define FIRMWARE_POSITION_MEMORY            2

#define BT_HCI_MODE_H4                      0
#define BT_HCI_MODE_H5                      1

/* user configuration related define */
#define MAX_BT_NAME                 248
#define MAX_BT_PHONE_NUMBER         20
#define MAX_BT_DEVICE_RECORD        10

#define MAX_BT_OBEX_FILE_NAME       256
#define MAX_BT_OBEX_FILE_TYPE_SIZE  32
#define L2CAP_RETRANS_SUPPORT   1
#if L2CAP_RETRANS_SUPPORT
#define BT_OBEX_FRAME_SIZE          (8087 - MAX_BT_OBEX_FILE_TYPE_SIZE - MAX_BT_OBEX_FILE_NAME - 5)
#else
#define BT_OBEX_FRAME_SIZE          (4096 * 2)
#endif

#define BT_MODE_BR                  0
#define BT_MODE_BR_LE               1
#define BT_MODE_LE                  2

#define BT_ROLE_MASTER              0
#define BT_ROLE_SLAVE               1

#define BT_SNIFF_ON                 1
#define BT_SNIFF_OFF                0

#define BT_FIRMWARE_AT_SD           0
#define BT_FIRMWARE_AT_FLASH        1
#define BT_FIRMWARE_AT_MEMORY       2

#define BT_WAKELOCK_UART_TX_DMA     (1 << 0)
#define BT_WAKELOCK_UART_RECV       (1 << 1)
#define BT_WAKELOCK_UART_RX_DMA     (1 << 2)

#define BT_A2DP_SOURCE_PRF (1 << 0)
#define BT_AVRCP_PRF       (1 << 1)
#define BT_HFP_PRF         (1 << 2)
#define BT_OBEX_PRF        (1 << 3)
#define BT_SPP_PRF         (1 << 4)
#define BT_A2DP_SINK_PRF   (1 << 5)
#define BT_HFP_HF_PRF      (1 << 6)
#define BT_HID_PRF         (1 << 7)
#define BT_PBAP_PRF        (1 << 8)
#define BT_MAP_PRF         (1 << 9)


#define BT_ERR_CODE_UNKNOWN_CONNECTION_IDENTIFIER           0x02
#define BT_ERR_CODE_HARDWARE_FAILURE                        0x03
#define BT_ERR_CODE_PAGE_TIMEOUT                            0x04
#define BT_ERR_CODE_AUTHENTICATION_FAILURE                  0x05
#define BT_ERR_CODE_PIN_or_KEY_MISSING                      0x06
#define BT_ERR_CODE_CONNECTION_TIMEOUT                      0x08
#define BT_ERR_CODE_CONNECTION_ALREADY_EXISTS               0x0B
#define BT_ERR_CODE_CONNECTION_ACCEPT_TIMEOUT_EXCEEDED      0x10
#define BT_ERR_CODE_REMOTE_USER_TERMINATED_CONNECTION       0x13
#define BT_ERR_CODE_CONNECTION_TERMINATED_BY_LOCAL_HOST     0x16
// private error code
#define BT_ERR_CODE_OBEX_SEND_FAILED_BAD_STATUS             0x70
#define BT_ERR_CODE_OBEX_SEND_FAILED_FILE_NAME_TOO_LONG     0x71



enum {
    BTTASK_CMD_MODULE_BASE      = 0,
    BTTASK_CMD_MODULE_LE        = 1000,
    BTTASK_CMD_MODULE_CLASSIC   = 2000,
    BTTASK_CMD_MODULE_CUSTOM    = 3000,
    BTTASK_CMD_MODULE_TEST      = 4000,
};



#define BTTASK_CMD_PROFILE_CMD_START (BTTASK_CMD_MODULE_BASE+200)

enum {
    BTTASK_CMD_ACL_CONNECT = BTTASK_CMD_MODULE_BASE,
    BTTASK_CMD_ACL_DISCONNECT,
    BTTASK_CMD_CANCEL_ACL_CONNECT,
    BTTASK_CMD_INQUIRY,
    BTTASK_CMD_INQUIRY_CANCEL,
    BTTASK_CMD_SET_VISIBLE,
    BTTASK_CMD_SET_VISIBLE_CONNECTABLE,
    BTTASK_CMD_SET_LOCAL_NAME,
    BTTASK_CMD_BONDING_ACCEPT,
    BTTASK_CMD_BONDING,
    BTTASK_CMD_UNBONDING, //10
    BTTASK_CMD_PIN_REPLY,
    BTTASK_CMD_PIN_NEGATIVE_REPLY,
    BTTASK_CMD_USER_PASSKEY_REQUEST_REPLY,
    BTTASK_CMD_USER_PASSKEY_REQUEST_NEGATIVE_REPLY,
    BTTASK_CMD_SEND_KEYPRESS_NOTIFICATION,
    BTTASK_CMD_SNIFF_MODE_ENABLE,
    // New command for custom
    BTTASK_CMD_SET_CHECK_CONTROLLER_ALIVE,

    //a2dp
    BTTASK_CMD_CONNECT_A2DP = BTTASK_CMD_PROFILE_CMD_START,
    BTTASK_CMD_DISCONNECT_A2DP,
    BTTASK_CMD_A2DP_SEND_START,
    BTTASK_CMD_A2DP_SEND_SUSPEND,
    BTTASK_CMD_A2DP_SEND_MEDIA_DATA,
    //avrcp
    BTTASK_CMD_CONNECT_AVRCP,
    BTTASK_CMD_DISCONNECT_AVRCP,
    BTTASK_CMD_AVRCP_PLAY,
    BTTASK_CMD_AVRCP_PAUSE,
    BTTASK_CMD_AVRCP_STOP,
    BTTASK_CMD_AVRCP_FORWARD, //BTTASK_CMD_PROFILE_CMD_START+10
    BTTASK_CMD_AVRCP_BACKWARD,
    //hfp
    BTTASK_CMD_CONNECT_HFP,
    BTTASK_CMD_DISCONNECT_HFP,
    BTTASK_CMD_HFP_ACCEPT_CONNECTION,
    BTTASK_CMD_HFP_REJECT_CONNECTION,
    BTTASK_CMD_HFP_UPDATE_CALLSTATUS,
    BTTASK_CMD_HFP_UPDATE_PHONE_NUMBER,
    BTTASK_CMD_HFP_UPDATE_CALLHOLD,
    BTTASK_CMD_HFP_SET_SPEAKER_GAIN,
    BTTASK_CMD_HFP_SET_MICROPHONE_GAIN, //BTTASK_CMD_PROFILE_CMD_START+20
    BTTASK_CMD_HFP_SEND_AT_RAWDATA,
    //obex
    BTTASK_CMD_CONNECT_OBEX_OPP,
    BTTASK_CMD_DISCONNECT_OBEX_OPP,
    BTTASK_CMD_OBEX_OPP_SEND_FILE_START,
    BTTASK_CMD_OBEX_OPP_SEND_FILE,
    BTTASK_CMD_OBEX_RESPONSE,
    //sco
    BTTASK_CMD_SETUP_SCO,
    BTTASK_CMD_DISCONNECT_SCO,
    BTTASK_CMD_SCO_DATA_SEND, //BTTASK_CMD_PROFILE_CMD_START+30
    //spp
    BTTASK_CMD_SPP_CONNECT,
    BTTASK_CMD_SPP_DISCONNECT,
    BTTASK_CMD_SPP_SEND_DATA,
    //hid
    BTTASK_CMD_HID_CONNECT,
    BTTASK_CMD_HID_DISCONNECT,
    //HFP HF
    BTTASK_CMD_CONNECT_HFP_HF,
    BTTASK_CMD_DISCONNECT_HFP_HF,
    BTTASK_CMD_COPS,
    BTTASK_CMD_ATA,
    BTTASK_CMD_ATH, //BTTASK_CMD_PROFILE_CMD_START+40
    BTTASK_CMD_DIAL,
    BTTASK_CMD_DIAL_MEMORY,
    BTTASK_CMD_SPEAKER_GAIN,
    BTTASK_CMD_MIC_GAIN,
    BTTASK_CMD_CHLD0,
    BTTASK_CMD_CHLD1,
    BTTASK_CMD_CHLD2,
    BTTASK_CMD_CHLD3,
    BTTASK_CMD_CHLD4,
    BTTASK_CMD_BLDN, //BTTASK_CMD_PROFILE_CMD_START+50
    BTTASK_CMD_CLCC,
    BTTASK_CMD_CHLD1X,
    BTTASK_CMD_CHLD2X,
    //a2dp sink
    BTTASK_CMD_A2DP_SINK_CONNECT,
    BTTASK_CMD_A2DP_SINK_DISCONNECT,
    //pbap client
    BTTASK_CMD_PBAP_CLIENT_CONNECT,
    BTTASK_CMD_PBAP_CLIENT_DISCONNECT,
    BTTASK_CMD_PBAP_CLIENT_FLOW_CONTROL,
    BTTASK_CMD_PBAP_CLIENT_GET_PB_SIZE,
    BTTASK_CMD_PBAP_CLIENT_PULL_PB, //BTTASK_CMD_PROFILE_CMD_START+60
    BTTASK_CMD_PBAP_CLIENT_PULL_NEXT_PB,
    BTTASK_CMD_PBAP_CLIENT_ABORT,

    //pbap client
    BTTASK_CMD_MAP_CLIENT_CONNECT,
    BTTASK_CMD_MAP_CLIENT_DISCONNECT,
    BTTASK_CMD_MAP_CLIENT_FLOW_CONTROL,
    BTTASK_CMD_MAP_CLIENT_GET_NEXT,
    BTTASK_CMD_MAP_CLIENT_NOTIFICATION,
    BTTASK_CMD_MAP_CLIENT_SET_FOLDER,
    BTTASK_CMD_MAP_CLIENT_GET_FOLDER_LISTING,
    BTTASK_CMD_MAP_CLIENT_GET_MESSAGE_LISTING, //BTTASK_CMD_PROFILE_CMD_START+70
    BTTASK_CMD_MAP_CLIENT_GET_MESSAGE,
    BTTASK_CMD_MAP_CLIENT_PUSH_MESSAGE,

    BTTASK_CMD_LE_SET_RANDOM_ADDRESS = BTTASK_CMD_MODULE_LE,
    BTTASK_CMD_LE_SET_ADV_PARAMETERS,
    BTTASK_CMD_LE_SET_ADV_DATA,
    BTTASK_CMD_LE_SET_SCAN_RESPONSE,
    BTTASK_CMD_LE_SET_ADV_ENABLE,
    BTTASK_CMD_LE_SET_ADV_SET_RANDOM_ADDRESS,
    BTTASK_CMD_LE_SET_EXT_ADV_PARAMETERS,
    BTTASK_CMD_LE_SET_EXT_ADV_DATA,
    BTTASK_CMD_LE_SET_EXT_SCAN_RESPONSE,
    BTTASK_CMD_LE_SET_EXT_ADV_ENABLE,
    BTTASK_CMD_LE_READ_ADV_PHY_TXPOWER,

    BTTASK_CMD_LE_NOTIFY,
    BTTASK_CMD_LE_INDICATE,

    BTTASK_CMD_LE_SCAN,
    BTTASK_CMD_LE_SCAN_STOP,
    BTTASK_CMD_LE_CONNECT,
    BTTASK_CMD_LE_DISCONNECT,
    BTTASK_CMD_LE_CLEAR_WHITE_LIST,
    BTTASK_CMD_LE_SET_WHITE_LIST,

    BTTASK_CMD_RAW_VENDOR_CMD,
    BTTASK_CMD_TEST_READ_RSSI,
    BTTASK_CMD_TEST_HCI_RESET,
    BTTASK_CMD_TEST_SET_COEXIST_MODE,
    BTTASK_CMD_LE_SET_PASSKEY_FROM_LOCAL,
    BTTASK_CMD_LE_SET_PAIR_ENABLE, // enable normal pair rsp

    // le custom
    BTTASK_CMD_LE_REGISTER_ATT_SERVER = BTTASK_CMD_MODULE_CUSTOM + 1,
    BTTASK_CMD_LE_SECURITY_REQUEST,
    BTTASK_CMD_LE_DB_CONTROL_GET_INFO,
    BTTASK_CMD_LE_DB_CONTROL_REMOVE_INDEX,

    BTTASK_CMD_LE_CUSTOM_READ_REQUEST,
    BTTASK_CMD_LE_CUSTOM_WRITE_REQUEST,
    BTTASK_CMD_LE_CUSTOM_WRITE_COMMAND,
    BTTASK_CMD_LE_CUSTOM_MTU_REQUEST,
    BTTASK_CMD_LE_CUSTOM_GATT_SCAN_START,
    BTTASK_CMD_LE_CONNECTION_PARAMETER_UPDATE_REQUEST,
    BTTASK_CMD_LE_CUSTOM_SET_EXTENDED_ADV_SUPPORTED,

    //bt test
    BTTASK_CMD_TEST_DUT = BTTASK_CMD_MODULE_TEST + 1,
    BTTASK_CMD_TEST_TX_TONE,
    BTTASK_CMD_TEST_TX_PACKET,
    BTTASK_CMD_TEST_RX_PACKET,
    BTTASK_CMD_TEST_LE_ENHANCED_RECEIVER,
    BTTASK_CMD_TEST_LE_ENHANCED_TRANSMITTER,
    BTTASK_CMD_TEST_LE_END,

};

enum {
    BTTASK_IND_TYPE_COMMON,
    BTTASK_IND_TYPE_ACL,
    BTTASK_IND_TYPE_SCO,
    BTTASK_IND_TYPE_A2DP,
    BTTASK_IND_TYPE_AVRCP,
    BTTASK_IND_TYPE_HFP,
    BTTASK_IND_TYPE_OBEX,
    BTTASK_IND_TYPE_SPP,
    BTTASK_IND_TYPE_LE,
    BTTASK_IND_TYPE_A2DP_SINK,
    BTTASK_IND_TYPE_HFP_HF,
    BTTASK_IND_TYPE_HID,
    BTTASK_IND_TYPE_PBAP,
    BTTASK_IND_TYPE_MAP,
};

enum {
    BTTASK_IND_INQUIRY_RESULT,
    BTTASK_IND_INQUIRY_COMPLETE,
    BTTASK_IND_PAIRING_REQUEST,
    BTTASK_IND_PAIRED,
    BTTASK_IND_PIN_REQUEST,
    BTTASK_IND_USER_PASSKEY_NOTIFICATION,
    BTTASK_IND_USER_PASSKEY_REQUEST,
    BTTASK_IND_POWERUP_COMPLETE,
    BTTASK_IND_POWERUP_FAILED,
    BTTASK_IND_SHUTDOWN_COMPLETE,
    BTTASK_IND_BTFIRMWARE_ASSERT,
    BTTASK_IND_HCI_COMPLETE_EVENT,
    BTTASK_IND_NULL, // message was eaten by upper layer
    BTTASK_IND_NAME,
    BTTASK_IND_RSSI,
    BTTASK_IND_TEMPERATURE_CHECK,
}; // common define

enum {
    BTTASK_IND_ACL_CONNECTED,
    BTTASK_IND_ACL_DISCONNECTED,
    BTTASK_IND_ACL_CONNECT_FAILED,
}; // ACL define

enum {
    BTTASK_IND_SCO_CONNECTED,
    BTTASK_IND_SCO_DISCONNECTED,
    BTTASK_IND_SCO_CONNECT_FAILED,
}; // SCO define

enum {
    BTTASK_IND_A2DP_CONNECTED,
    BTTASK_IND_A2DP_MEIDA_CONNECTED,
    BTTASK_IND_A2DP_DISCONNECTED,
    BTTASK_IND_A2DP_START,
    BTTASK_IND_A2DP_MEDIA_SEND_COMPLETE,
    BTTASK_IND_REMOTE_SBC_CAPABILITIES,
    BTTASK_IND_A2DP_START_PRIVATE,
    BTTASK_IND_A2DP_MEDIA_MTU,
    BTTASK_IND_A2DP_SUSPEND,
    BTTASK_IND_A2DP_REJECTED,
}; // a2dp define

enum {
    BTTASK_IND_A2DP_SINK_CONNECTED,
    BTTASK_IND_A2DP_SINK_MEIDA_CONNECTED,
    BTTASK_IND_A2DP_SINK_DISCONNECTED,
    BTTASK_IND_A2DP_SINK_REMOTE_SBC_CAPABILITIES,
    BTTASK_IND_A2DP_SINK_MEDIA_PAYLOAD,
    BTTASK_IND_A2DP_SINK_PLAY_STARTED,
    BTTASK_IND_A2DP_SINK_PLAY_SUSPENDED,
    BTTASK_IND_A2DP_SINK_PLAY_STOPPED,
}; // a2dp sink define

enum {
    BTTASK_IND_AVRCP_CONNECTED,
    BTTASK_IND_AVRCP_DISCONNECTED,
    BTTASK_IND_AVRCP_KEY_PRESSED,
    BTTASK_IND_AVRCP_KEY_RELEASED,
}; // avrcp define

enum {
    BTTASK_IND_HFP_CONNECTION_REQUEST, // HF initate a connection to AG
    BTTASK_IND_HFP_CONNECTED, // connection complete, HF or AG initate this connection
    BTTASK_IND_HFP_DISCONNECTED,
    BTTASK_IND_HFP_ATA,
    BTTASK_IND_HFP_ATCHUP,
    BTTASK_IND_HFP_DIAL,
    BTTASK_IND_HFP_ATCHLD,
    BTTASK_IND_HFP_VOICE_RECOGNITION,
    BTTASK_IND_HFP_SPEAKER_VOLUME,
    BTTASK_IND_HFP_MICROPHONE_GAIN,
    BTTASK_IND_HFP_SDP_FAILED, // remote device not support HFP
    BTTASK_IND_HFP_CLCC,
    BTTASK_IND_HFP_RESPONSE_AND_HOLD,
}; // hfp ag define

//for btstack
enum{
    BTBS_CALL_STATE_IDLE,
    BTBS_CALL_STATE_DIALING,
    BTBS_CALL_STATE_INCONING,
    BTBS_CALL_STATE_ALERTING,
    BTBS_CALL_STATE_WAITING,
    BTBS_CALL_STATE_HELD, //5
    BTBS_CALL_STATE_OUTGOING_CALL_ESTABLISHED,
    BTBS_CALL_STATE_AG_ANSWER_INCOMING_CALL,
    BTBS_CALL_STATE_AG_JOIN_HELD_CALL,
    BTBS_CALL_STATE_OUTGOING_CALL_REJECTED,
    BTBS_CALL_STATE_TERMINATE_CALL, //10
    BTBS_CALL_STATE_DROP,
};

enum {
    BTTASK_IND_HFP_HF_CONNECTED, // connection complete, HF or AG initate this connection
    BTTASK_IND_HFP_HF_DISCONNECTED,
    BTTASK_IND_HFP_HF_SPEAKER_VOLUME,
    BTTASK_IND_HFP_HF_MICROPHONE_GAIN,
    BTTASK_IND_HFP_HF_RING,
    BTTASK_IND_HFP_HF_AG_INDICATOR_STATUS_CHANGED,
    BTTASK_IND_HFP_HF_NETWORK_OPERATOR_CHANGED,
    BTTASK_IND_HFP_HF_CLIP,
    BTTASK_IND_HFP_HF_CLCC,
    BTTASK_IND_HFP_SCO_DATA,
}; // hfp hf define

enum {
    BTTASK_IND_OBEX_OPP_SERVER_CONNECTED,
    BTTASK_IND_OBEX_OPP_SERVER_DISCONNECTED,
    BTTASK_IND_OBEX_OPP_SERVER_OBJECT_FILE_INFO,
    BTTASK_IND_OBEX_OPP_SERVER_OBJECT_RECIEVE_DATA,
    BTTASK_IND_OBEX_OPP_SERVER_OBJECT_RECIEVE_FINISH,
    BTTASK_IND_OBEX_OPP_SERVER_OBJECT_RECIEVE_ABORT,
    BTTASK_IND_OBEX_OPP_CLIENT_CONNECTED,
    BTTASK_IND_OBEX_OPP_CLIENT_DISCONNECTED,
    BTTASK_IND_OBEX_OPP_CLIENT_OBJECT_PUT_FAILED,
    BTTASK_IND_OBEX_OPP_CLIENT_OBJECT_PUT_SUCCESS,
    BTTASK_IND_OBEX_OPP_CLIENT_OBJECT_PUT_CONTINUE,
    BTTASK_IND_OBEX_PBAP_SERVER_CONNECTED,
}; // obex define

enum {
    BTTASK_IND_SPP_CONNECT_IND,
    BTTASK_IND_SPP_CONNECT_CNF,
    BTTASK_IND_SPP_DISCONNECT_IND,
    BTTASK_IND_SPP_DISCONNECT_CNF,
    BTTASK_IND_SPP_DATA_IND,
    BTTASK_IND_SPP_DATA_CNF,
    BTTASK_IND_SPP_FLOW_IND,
 }; // SPP define

enum {
    BTTASK_IND_PBAP_CLIENT_CONNECTED,
    BTTASK_IND_PBAP_CLIENT_DISCONNECTED,
    BTTASK_IND_PBAP_CLIENT_PB_SIZE,
    BTTASK_IND_PBAP_CLIENT_OPERATION_COMPLETED,
    BTTASK_IND_PBAP_CLIENT_DATA,
}; //pbap

enum {
    BTTASK_IND_HID_CONNECTED,
    BTTASK_IND_HID_DISCONNECTED,
};

enum {
    BTTASK_IND_MAP_CLIENT_CONNECTED,
    BTTASK_IND_MAP_CLIENT_DISCONNECTED,
    BTTASK_IND_MAP_CLIENT_OPERATION_COMPLETED,
    BTTASK_IND_MAP_CLIENT_DATA,
    BTTASK_IND_MAP_MNS_CONNECTED,
    BTTASK_IND_MAP_MNS_DISCONNECTED,
    BTTASK_IND_MAP_MNS_EVENT_REPORT_START,
    BTTASK_IND_MAP_MNS_EVENT_REPORT_FINISH,
}; //map

enum {
    BTTASK_IND_LE_SCAN_EVENT,
    BTTASK_IND_LE_GATT_CONNECTED,
    BTTASK_IND_LE_GATT_DISCONNECTED,
    BTTASK_IND_LE_MTU_EXCHANGED, // this indication means MTU be changed (no matter master or slave)
    BTTASK_IND_LE_CLIENT_HANDLE_NOTIFY,
    BTTASK_IND_LE_CLIENT_HANDLE_INDIATION,
    BTTASK_IND_LE_WHITE_LIST_SIZE,
    BTTASK_IND_SMP_PASSKEY,
    BTTASK_IND_ADV_PHY_TXPOWER,
    BTTASK_IND_SLAVE_LE_BOND_COMPLETE, //slave role, bond

    // add for btstack
    BTTASK_IND_LE_ATT_EVENT_CAN_SEND_NOW,
    BTTASK_IND_LE_ATT_EVENT_CAN_WRITE_NOW,
    BTTASK_IND_LE_IDENTITY_INFO,
    BTTASK_IND_LE_DB_CONTROL_GET_INFO,
    BTTASK_IND_LE_ATT_EVENT_READ_DATA_RESULT,
    BTTASK_IND_LE_ATT_EVENT_READ_OVER_RESULT,
    BTTASK_IND_LE_GATT_SCAN_RESULT,
    BTTASK_IND_LE_GATT_SCAN_DUMP_SERVICE,
    BTTASK_IND_LE_GATT_SCAN_DUMP_CHARACTERISTIC,
    BTTASK_IND_LE_GATT_SCAN_DUMP_DESCRIPTOR,
    BTTASK_IND_LE_CONNECTION_UPDATE_COMPLETE,
    BTTASK_IND_LE_ATT_INDICATION_COMPLETE,
    BTTASK_IND_LE_ENCRYPTION_CHANGE,
}; // le define

enum {
    BT_LE_ADV_LEGACY_MODE = 0,
    BT_LE_EXTENDED_ADV_LEGACY_MODE,
    BT_LE_EXTENDED_ADV_AUX_MODE,
}; // le adv mode
struct ql_bt_task_le_ext_adv_enable {
    unsigned char enable;
    unsigned char number;
    unsigned char *handle;
    unsigned short *duration;
    unsigned char *max_event;
};
struct ql_bt_task_le_ext_adv_data {
    unsigned char data[251];
    unsigned char length;
    unsigned char handle;
    unsigned char operation;
    unsigned char fragment;
};

struct ql_bt_task_le_set_adv_random_address {
    unsigned char handle;
    struct bt_addr addr;
};
struct bt_event_pairing_request {
    unsigned char name[MAX_BT_NAME];
    struct bt_addr addr;
    unsigned int numeric_value;
    unsigned int cod;
    unsigned char io_capability;
};

struct bt_event_paired {
    unsigned char name[MAX_BT_NAME];
    unsigned char addr[6];
    unsigned linkey[16];
    int linkkey_type;
    unsigned int cod;
};
struct bt_event_name_indication {
    struct bt_addr addr;
    unsigned char name[MAX_BT_NAME];
    int name_length;
};
struct bt_event_pin_request {
    struct bt_addr addr;
    unsigned char name[MAX_BT_NAME];
    unsigned int cod;
};

struct bt_event_acl_connect {
    unsigned char addr[6];
    unsigned short int handle;
};
struct bt_event_acl_disconnect {
    unsigned short int reason;
    unsigned short int handle;
};
struct bt_task_hid_connect {
    unsigned char addr[6];
    unsigned char remote_role;
};


#endif
